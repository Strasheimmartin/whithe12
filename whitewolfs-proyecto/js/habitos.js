document.addEventListener("DOMContentLoaded", () => {
  // ---- H√ÅBITOS RECOMENDADOS ----
  const HABITOS_RECO = [
    { nombre: "Tomar 2L de agua", tipo: "salud", desc: "Manten√© tu cuerpo y mente bien hidratados.",
      beneficios: [
        "Favorece la concentraci√≥n y el rendimiento mental.",
        "Mejora la energ√≠a y vitalidad.",
        "Ayuda al metabolismo y desintoxicaci√≥n natural."
      ],
      explicacion: "Mantenerte bien hidratado es uno de los h√°bitos m√°s simples pero poderosos que pod√©s adoptar..."
    },
    { nombre: "30 minutos de ejercicio", tipo: "ejercicio", desc: "Mov√© el cuerpo para sentirte mejor f√≠sica y mentalmente.",
      beneficios: [
        "Aumenta la energ√≠a y reduce el estr√©s.",
        "Mejora la salud cardiovascular.",
        "Libera endorfinas que te hacen m√°s feliz."
      ],
      explicacion: "El movimiento es medicina..."
    },
    { nombre: "Leer 10 p√°ginas", tipo: "mental", desc: "Nutre tu mente con ideas nuevas cada d√≠a.",
      beneficios: [
        "Ejercita la memoria y la concentraci√≥n.",
        "Estimula la creatividad.",
        "Reduce el estr√©s y mejora la empat√≠a."
      ],
      explicacion: "La lectura diaria expande tu universo interior..."
    },
    { nombre: "No consumir az√∫car refinada hoy", tipo: "salud", desc: "Dale un descanso a tu organismo, evit√° az√∫cares agregados.",
      beneficios: [
        "Mejora la energ√≠a estable durante el d√≠a.",
        "Reduce el riesgo de enfermedades metab√≥licas.",
        "Favorece el control del apetito y el peso."
      ],
      explicacion: "Reducir el az√∫car agregado le da un respiro a tu cuerpo y mente..."
    },
    { nombre: "Agradecer 3 cosas al despertar", tipo: "mental", desc: "Comenz√° tu d√≠a enfocando la mente en lo positivo.",
      beneficios: [
        "Mejora el estado de √°nimo y la resiliencia.",
        "Reduce el estr√©s y la ansiedad.",
        "Potencia la motivaci√≥n y la creatividad."
      ],
      explicacion: "La gratitud transforma el modo en que ves la vida..."
    }
  ];

  // Iconos simples por tipo de h√°bito
  const ICONOS = {
    "ejercicio": "üí™",
    "salud": "üíß",
    "mental": "üìö",
    "otro": "‚≠ê"
  };

  // ---- ELEMENTOS DOM ----
  const habitForm = document.getElementById('habitForm');
  const habitName = document.getElementById('habitName');
  const habitFreq = document.getElementById('habitFreq');
  const habitList = document.getElementById('habitList');
  const aywaFrase = document.getElementById('aywaFrase');
  const btnRecomendados = document.getElementById('btnRecomendados');
  const recoPanel = document.getElementById('recoPanel');
  const lobeznoBar = document.getElementById('lobeznoBar');
  const emojiLobezno = document.getElementById('emojiLobezno');
  const fraseLobezno = document.getElementById('fraseLobezno');
  const habitosIzqLista = document.getElementById('habitosIzqLista');

  // ---- DATOS Y STORAGE ----
  function getHabits() {
    return JSON.parse(localStorage.getItem('habitos') || '[]');
  }
  function saveHabits(habits) {
    localStorage.setItem('habitos', JSON.stringify(habits));
  }

  // ---- HISTORIAL: Guardamos √∫ltimos 7 d√≠as de cada h√°bito ----
  function getHistorial(h) {
    return h.historial || [];
  }
  function updateHistorial(h, cumplido) {
    let hoy = today();
    let historial = h.historial || [];
    if (historial.length && historial[historial.length - 1].fecha === hoy) {
      historial[historial.length - 1].cumplido = cumplido;
    } else {
      historial.push({fecha: hoy, cumplido});
      if(historial.length > 7) historial = historial.slice(historial.length - 7);
    }
    h.historial = historial;
    return historial;
  }

  // ---- COLUMNA IZQUIERDA: Lista de h√°bitos activos ----
  function renderHabitosIzq() {
    if (!habitosIzqLista) return;
    const habits = getHabits();
    if (!habits.length) {
      habitosIzqLista.innerHTML = "<li style='color:#ffe066;'>Sin h√°bitos activos.</li>";
      return;
    }
    habitosIzqLista.innerHTML = habits.map((h, idx) => {
      // Elegir icono seg√∫n nombre/tipo
      let icono = ICONOS[buscarTipoHabito(h.name)] || ICONOS.otro;
      const historial = getHistorial(h);
      const marcadoHoy = historial.length && historial[historial.length-1].fecha === today() && historial[historial.length-1].cumplido;
      return `
        <li class="habito-izq-item${marcadoHoy ? ' cumplido' : ''}">
          <span class="icono">${icono}</span>
          <span>${h.name}</span>
          <span class="habit-tipo">${h.freq === 'diario' ? 'Diario' : 'Semanal'}</span>
          <button class="btn-mark${marcadoHoy ? ' cumplido' : ''}" title="Marcar como realizado" data-idx="${idx}">${marcadoHoy ? '‚úîÔ∏è' : '‚úî'}</button>
          <button class="btn-del" title="Eliminar" data-delidx="${idx}">üóëÔ∏è</button>
        </li>
      `;
    }).join('');

    // Asignar eventos despu√©s de renderizar
    habitosIzqLista.querySelectorAll('.btn-mark').forEach(btn=>{
      btn.onclick = function(){
        let idx = parseInt(this.getAttribute('data-idx'));
        marcarHabit(idx);
      };
    });
    habitosIzqLista.querySelectorAll('.btn-del').forEach(btn=>{
      btn.onclick = function(){
        let idx = parseInt(this.getAttribute('data-delidx'));
        eliminarHabit(idx);
      };
    });
  }

  // Detectar tipo (usa el recomendado, o gen√©rico)
  function buscarTipoHabito(nombre) {
    let reco = HABITOS_RECO.find(h => h.nombre.toLowerCase() === nombre.toLowerCase());
    return reco ? reco.tipo : "otro";
  }

  // ---- PANEL CENTRAL ----
  function renderHabits() {
    const habits = getHabits();
    habitList.innerHTML = '';
    if (!habits.length) {
      habitList.innerHTML = "<p style='color:#ffe066;'>A√∫n no tienes h√°bitos registrados.</p>";
      lobeznoBar.style.display = "none";
      aywaFrase.textContent = "AYWA: ¬°Agreg√° tu primer h√°bito o explor√° los recomendados para comenzar la transformaci√≥n!";
      renderHabitosIzq();
      return;
    }
    let allDone = true, hayRacha = false;
    habits.forEach((h, idx) => {
      const historial = getHistorial(h);
      let historialHTML = '<span class="historial">';
      for(let i=0;i<7;i++){
        const dia = historial[historial.length-7+i];
        if(!dia) {
          historialHTML += `<span class="hist-dia hist-pendiente">-</span>`;
        } else if(dia.cumplido) {
          historialHTML += `<span class="hist-dia hist-cumplido">‚úî</span>`;
        } else {
          historialHTML += `<span class="hist-dia hist-fallido">‚úó</span>`;
        }
      }
      historialHTML += '</span>';
      const marcadoHoy = historial.length && historial[historial.length-1].fecha === today() && historial[historial.length-1].cumplido;
      if(!marcadoHoy) allDone = false;
      if(h.racha >= 3) hayRacha = true;
      const div = document.createElement('div');
      div.className = 'habit-item' + (marcadoHoy ? ' cumplido' : '');
      div.innerHTML = `
        <span class="info">
          <span class="habit-name">${h.name}</span>
          <span class="habit-freq">${h.freq === 'diario' ? 'Diario' : 'Semanal'}</span>
          <span class="racha">üî• Racha: ${h.racha || 0}</span>
          ${historialHTML}
        </span>
        <span>
          <button class="btn-done${marcadoHoy ? ' cumplido' : ''}" onclick="marcarHabit(${idx})">${marcadoHoy ? '‚úî' : 'Cumplir'}</button>
          <button class="btn-del" onclick="eliminarHabit(${idx})">Eliminar</button>
        </span>
      `;
      habitList.appendChild(div);
    });
    lobeznoBar.style.display = "flex";
    if(allDone){
      emojiLobezno.textContent = "üê∫‚ú®";
      fraseLobezno.textContent = "¬°Lobezno Alpha celebra tu constancia! Todas las tareas est√°n cumplidas hoy.";
    } else if(hayRacha) {
      emojiLobezno.textContent = "üê∫üî•";
      fraseLobezno.textContent = "¬°Vas en racha, Alpha! Tu lobo interior est√° creciendo fuerte.";
    } else {
      emojiLobezno.textContent = "üê∫üò¥";
      fraseLobezno.textContent = "El lobezno espera tu acci√≥n. ¬°Hoy pod√©s avanzar!";
    }
    let frases = [
      "La constancia es el m√∫sculo secreto de todo Alpha.",
      "Si ca√©s, levantate. AYWA cree en vos.",
      "Hoy es un gran d√≠a para sumar un paso m√°s.",
      "Tu futuro depende de los h√°bitos que constru√≠s hoy.",
      "El √©xito es la suma de peque√±as victorias diarias."
    ];
    aywaFrase.textContent = frases[Math.floor(Math.random()*frases.length)];
    renderHabitosIzq();
  }

  // ---- MARCAR HABITO Y ELIMINAR ----
  window.marcarHabit = function(idx) {
    const habits = getHabits();
    let h = habits[idx];
    let historial = updateHistorial(h, true);
    if(historial.length && historial[historial.length-1].fecha === today() && historial[historial.length-1].cumplido){
    } else {
      h.racha = (h.racha || 0) + 1;
    }
    saveHabits(habits);
    renderHabits();
  };

  window.eliminarHabit = function(idx) {
    if (!confirm("¬øSeguro que quer√©s eliminar este h√°bito?")) return;
    const habits = getHabits();
    habits.splice(idx, 1);
    saveHabits(habits);
    renderHabits();
  };

  // ---- AGREGAR HABITO MANUAL ----
  function agregarHabitoManual(nombre, frecuencia) {
    let habits = getHabits();
    if(habits.some(x => x.name.toLowerCase() === nombre.toLowerCase())) {
      alert("Ya ten√©s ese h√°bito en tu lista.");
      return false;
    }
    habits.push({
      name: nombre,
      freq: frecuencia,
      racha: 0,
      historial: []
    });
    saveHabits(habits);
    renderHabits();
    return true;
  }

  habitForm.onsubmit = function(e) {
    e.preventDefault();
    if(agregarHabitoManual(habitName.value.trim(), habitFreq.value.trim())){
      habitName.value = '';
    }
  };

  // ---- RECOMENDADOS ----
  btnRecomendados.onclick = function() {
    if(recoPanel.style.display==='block'){
      recoPanel.style.display='none';
      return;
    }
    let html = "";
    HABITOS_RECO.forEach((h, idx) => {
      html += `
      <div class="reco-hab">
        <div class="reco-titulo">${h.nombre}</div>
        <div class="reco-desc">${h.desc}</div>
        <button class="reco-btn-benef" data-beneficio="${idx}">Ver beneficios</button>
        <button class="reco-btn-add" data-add="${idx}">Agregar h√°bito</button>
        <div id="beneficios_${idx}" style="display:none"></div>
      </div>
      `;
    });
    recoPanel.innerHTML = html;
    recoPanel.style.display='block';

    recoPanel.querySelectorAll('.reco-btn-benef').forEach(btn=>{
      btn.onclick = function(){
        let idx = this.getAttribute('data-beneficio');
        mostrarBenef(idx);
      };
    });
    recoPanel.querySelectorAll('.reco-btn-add').forEach(btn=>{
      btn.onclick = function(){
        let idx = this.getAttribute('data-add');
        agregarHabitoRecomendado(idx);
      };
    });
  };

  function mostrarBenef(idx){
    let h = HABITOS_RECO[idx];
    let div = document.getElementById('beneficios_'+idx);
    if(div.style.display==='block'){ div.style.display='none'; return;}
    let lista = `<ul class="reco-lista">` + h.beneficios.map(b=>`<li>${b}</li>`).join('') + `</ul>`;
    div.innerHTML = `
      <div class="reco-benef">
        ${lista}
        <div class="reco-p">${h.explicacion}</div>
      </div>
    `;
    div.style.display = 'block';
  }

  function agregarHabitoRecomendado(idx){
    let h = HABITOS_RECO[idx];
    agregarHabitoManual(h.nombre, "diario");
    recoPanel.style.display='none';
    setTimeout(()=>alert("¬°H√°bito agregado con √©xito!"),350);
  }

  // ---- UTILIDAD ----
  function today() {
    const d = new Date();
    return `${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`;
  }
  function resetRachas() {
    let habits = getHabits();
    const t = today();
    habits.forEach(h => {
      let historial = h.historial || [];
      if(historial.length){
        let ult = historial[historial.length-1];
        if(ult.fecha !== t && ult.cumplido){
        }
        else if(ult.fecha !== t && !ult.cumplido){
          h.racha = 0;
        }
      }
    });
    saveHabits(habits);
  }
  resetRachas();
  renderHabits();
});
